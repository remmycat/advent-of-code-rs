<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="19838"><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (43 samples, 0.22%)</title><rect x="0.3125%" y="117" width="0.2168%" height="15" fill="rgb(227,0,7)" fg:x="62" fg:w="43"/><text x="0.5625%" y="127.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::analysis::compare::t_test (227 samples, 1.14%)</title><rect x="0.0101%" y="165" width="1.1443%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="227"/><text x="0.2601%" y="175.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::mixed::bootstrap (226 samples, 1.14%)</title><rect x="0.0151%" y="149" width="1.1392%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="226"/><text x="0.2651%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (226 samples, 1.14%)</title><rect x="0.0151%" y="133" width="1.1392%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="226"/><text x="0.2651%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`oorandom::Rand64::rand_range (124 samples, 0.63%)</title><rect x="0.5293%" y="117" width="0.6251%" height="15" fill="rgb(208,68,35)" fg:x="105" fg:w="124"/><text x="0.7793%" y="127.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::estimate::build_change_estimates (8 samples, 0.04%)</title><rect x="1.1544%" y="165" width="0.0403%" height="15" fill="rgb(232,128,0)" fg:x="229" fg:w="8"/><text x="1.4044%" y="175.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::Distribution&lt;A&gt;::confidence_interval (6 samples, 0.03%)</title><rect x="1.1644%" y="149" width="0.0302%" height="15" fill="rgb(207,160,47)" fg:x="231" fg:w="6"/><text x="1.4144%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (6 samples, 0.03%)</title><rect x="1.1644%" y="133" width="0.0302%" height="15" fill="rgb(228,23,34)" fg:x="231" fg:w="6"/><text x="1.4144%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (6 samples, 0.03%)</title><rect x="1.1644%" y="117" width="0.0302%" height="15" fill="rgb(218,30,26)" fg:x="231" fg:w="6"/><text x="1.4144%" y="127.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (6 samples, 0.03%)</title><rect x="1.1644%" y="101" width="0.0302%" height="15" fill="rgb(220,122,19)" fg:x="231" fg:w="6"/><text x="1.4144%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (4 samples, 0.02%)</title><rect x="1.1745%" y="85" width="0.0202%" height="15" fill="rgb(250,228,42)" fg:x="233" fg:w="4"/><text x="1.4245%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (4 samples, 0.02%)</title><rect x="1.1745%" y="69" width="0.0202%" height="15" fill="rgb(240,193,28)" fg:x="233" fg:w="4"/><text x="1.4245%" y="79.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (2 samples, 0.01%)</title><rect x="1.1846%" y="53" width="0.0101%" height="15" fill="rgb(216,20,37)" fg:x="235" fg:w="2"/><text x="1.4346%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="1.2652%" y="133" width="0.0101%" height="15" fill="rgb(206,188,39)" fg:x="251" fg:w="2"/><text x="1.5152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="1.2652%" y="117" width="0.0101%" height="15" fill="rgb(217,207,13)" fg:x="251" fg:w="2"/><text x="1.5152%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="1.2753%" y="133" width="0.0101%" height="15" fill="rgb(231,73,38)" fg:x="253" fg:w="2"/><text x="1.5253%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.02%)</title><rect x="1.3157%" y="85" width="0.0151%" height="15" fill="rgb(225,20,46)" fg:x="261" fg:w="3"/><text x="1.5657%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.08%)</title><rect x="1.2955%" y="117" width="0.0756%" height="15" fill="rgb(210,31,41)" fg:x="257" fg:w="15"/><text x="1.5455%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.06%)</title><rect x="1.3106%" y="101" width="0.0605%" height="15" fill="rgb(221,200,47)" fg:x="260" fg:w="12"/><text x="1.5606%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.04%)</title><rect x="1.3358%" y="85" width="0.0353%" height="15" fill="rgb(226,26,5)" fg:x="265" fg:w="7"/><text x="1.5858%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (32 samples, 0.16%)</title><rect x="1.9911%" y="101" width="0.1613%" height="15" fill="rgb(249,33,26)" fg:x="395" fg:w="32"/><text x="2.2411%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (124 samples, 0.63%)</title><rect x="2.3994%" y="85" width="0.6251%" height="15" fill="rgb(235,183,28)" fg:x="476" fg:w="124"/><text x="2.6494%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::analysis::compare::estimates::stats (408 samples, 2.06%)</title><rect x="1.2148%" y="149" width="2.0567%" height="15" fill="rgb(221,5,38)" fg:x="241" fg:w="408"/><text x="1.4648%" y="159.50">s..</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (393 samples, 1.98%)</title><rect x="1.2905%" y="133" width="1.9810%" height="15" fill="rgb(247,18,42)" fg:x="256" fg:w="393"/><text x="1.5405%" y="143.50">s..</text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (377 samples, 1.90%)</title><rect x="1.3711%" y="117" width="1.9004%" height="15" fill="rgb(241,131,45)" fg:x="272" fg:w="377"/><text x="1.6211%" y="127.50">s..</text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (222 samples, 1.12%)</title><rect x="2.1524%" y="101" width="1.1191%" height="15" fill="rgb(249,31,29)" fg:x="427" fg:w="222"/><text x="2.4024%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (49 samples, 0.25%)</title><rect x="3.0245%" y="85" width="0.2470%" height="15" fill="rgb(225,111,53)" fg:x="600" fg:w="49"/><text x="3.2745%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (49 samples, 0.25%)</title><rect x="3.0245%" y="69" width="0.2470%" height="15" fill="rgb(238,160,17)" fg:x="600" fg:w="49"/><text x="3.2745%" y="79.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (29 samples, 0.15%)</title><rect x="3.2715%" y="149" width="0.1462%" height="15" fill="rgb(214,148,48)" fg:x="649" fg:w="29"/><text x="3.5215%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::analysis::compare::common (745 samples, 3.76%)</title><rect x="0.0101%" y="181" width="3.7554%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="745"/><text x="0.2601%" y="191.50">solu..</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::bootstrap (509 samples, 2.57%)</title><rect x="1.1997%" y="165" width="2.5658%" height="15" fill="rgb(209,103,24)" fg:x="238" fg:w="509"/><text x="1.4497%" y="175.50">so..</text></g><g><title>solution-2a4fa3e3447dbfdf`oorandom::Rand64::rand_range (69 samples, 0.35%)</title><rect x="3.4177%" y="149" width="0.3478%" height="15" fill="rgb(229,88,8)" fg:x="678" fg:w="69"/><text x="3.6677%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (2 samples, 0.01%)</title><rect x="3.8159%" y="53" width="0.0101%" height="15" fill="rgb(213,181,19)" fg:x="757" fg:w="2"/><text x="4.0659%" y="63.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::Distribution&lt;A&gt;::confidence_interval (14 samples, 0.07%)</title><rect x="3.7756%" y="165" width="0.0706%" height="15" fill="rgb(254,191,54)" fg:x="749" fg:w="14"/><text x="4.0256%" y="175.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (14 samples, 0.07%)</title><rect x="3.7756%" y="149" width="0.0706%" height="15" fill="rgb(241,83,37)" fg:x="749" fg:w="14"/><text x="4.0256%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (14 samples, 0.07%)</title><rect x="3.7756%" y="133" width="0.0706%" height="15" fill="rgb(233,36,39)" fg:x="749" fg:w="14"/><text x="4.0256%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (13 samples, 0.07%)</title><rect x="3.7806%" y="117" width="0.0655%" height="15" fill="rgb(226,3,54)" fg:x="750" fg:w="13"/><text x="4.0306%" y="127.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (11 samples, 0.06%)</title><rect x="3.7907%" y="101" width="0.0554%" height="15" fill="rgb(245,192,40)" fg:x="752" fg:w="11"/><text x="4.0407%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (11 samples, 0.06%)</title><rect x="3.7907%" y="85" width="0.0554%" height="15" fill="rgb(238,167,29)" fg:x="752" fg:w="11"/><text x="4.0407%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (8 samples, 0.04%)</title><rect x="3.8058%" y="69" width="0.0403%" height="15" fill="rgb(232,182,51)" fg:x="755" fg:w="8"/><text x="4.0558%" y="79.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (4 samples, 0.02%)</title><rect x="3.8260%" y="53" width="0.0202%" height="15" fill="rgb(231,60,39)" fg:x="759" fg:w="4"/><text x="4.0760%" y="63.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (2 samples, 0.01%)</title><rect x="3.8361%" y="37" width="0.0101%" height="15" fill="rgb(208,69,12)" fg:x="761" fg:w="2"/><text x="4.0861%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.01%)</title><rect x="3.8663%" y="149" width="0.0101%" height="15" fill="rgb(235,93,37)" fg:x="767" fg:w="2"/><text x="4.1163%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="3.9974%" y="133" width="0.0101%" height="15" fill="rgb(213,116,39)" fg:x="793" fg:w="2"/><text x="4.2474%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="4.0075%" y="133" width="0.0101%" height="15" fill="rgb(222,207,29)" fg:x="795" fg:w="2"/><text x="4.2575%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.06%)</title><rect x="4.0175%" y="133" width="0.0605%" height="15" fill="rgb(206,96,30)" fg:x="797" fg:w="12"/><text x="4.2675%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="4.0780%" y="133" width="0.0101%" height="15" fill="rgb(218,138,4)" fg:x="809" fg:w="2"/><text x="4.3280%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="4.0881%" y="133" width="0.0101%" height="15" fill="rgb(250,191,14)" fg:x="811" fg:w="2"/><text x="4.3381%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (2 samples, 0.01%)</title><rect x="4.0982%" y="133" width="0.0101%" height="15" fill="rgb(239,60,40)" fg:x="813" fg:w="2"/><text x="4.3482%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.06%)</title><rect x="4.1486%" y="117" width="0.0605%" height="15" fill="rgb(206,27,48)" fg:x="823" fg:w="12"/><text x="4.3986%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.03%)</title><rect x="4.1788%" y="101" width="0.0302%" height="15" fill="rgb(225,35,8)" fg:x="829" fg:w="6"/><text x="4.4288%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="4.1990%" y="85" width="0.0101%" height="15" fill="rgb(250,213,24)" fg:x="833" fg:w="2"/><text x="4.4490%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.01%)</title><rect x="4.2192%" y="85" width="0.0101%" height="15" fill="rgb(247,123,22)" fg:x="837" fg:w="2"/><text x="4.4692%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="4.2091%" y="117" width="0.0252%" height="15" fill="rgb(231,138,38)" fg:x="835" fg:w="5"/><text x="4.4591%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="4.2141%" y="101" width="0.0202%" height="15" fill="rgb(231,145,46)" fg:x="836" fg:w="4"/><text x="4.4641%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="4.2343%" y="117" width="0.0101%" height="15" fill="rgb(251,118,11)" fg:x="840" fg:w="2"/><text x="4.4843%" y="127.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (27 samples, 0.14%)</title><rect x="4.5972%" y="101" width="0.1361%" height="15" fill="rgb(217,147,25)" fg:x="912" fg:w="27"/><text x="4.8472%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (84 samples, 0.42%)</title><rect x="4.9148%" y="85" width="0.4234%" height="15" fill="rgb(247,81,37)" fg:x="975" fg:w="84"/><text x="5.1648%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::sample::Sample&lt;A&gt;::median_abs_dev (293 samples, 1.48%)</title><rect x="4.1083%" y="133" width="1.4770%" height="15" fill="rgb(209,12,38)" fg:x="815" fg:w="293"/><text x="4.3583%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (266 samples, 1.34%)</title><rect x="4.2444%" y="117" width="1.3409%" height="15" fill="rgb(227,1,9)" fg:x="842" fg:w="266"/><text x="4.4944%" y="127.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (169 samples, 0.85%)</title><rect x="4.7333%" y="101" width="0.8519%" height="15" fill="rgb(248,47,43)" fg:x="939" fg:w="169"/><text x="4.9833%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (49 samples, 0.25%)</title><rect x="5.3382%" y="85" width="0.2470%" height="15" fill="rgb(221,10,30)" fg:x="1059" fg:w="49"/><text x="5.5882%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (48 samples, 0.24%)</title><rect x="5.3433%" y="69" width="0.2420%" height="15" fill="rgb(210,229,1)" fg:x="1060" fg:w="48"/><text x="5.5933%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.04%)</title><rect x="5.5903%" y="117" width="0.0403%" height="15" fill="rgb(222,148,37)" fg:x="1109" fg:w="8"/><text x="5.8403%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.03%)</title><rect x="5.6004%" y="101" width="0.0302%" height="15" fill="rgb(234,67,33)" fg:x="1111" fg:w="6"/><text x="5.8504%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (24 samples, 0.12%)</title><rect x="6.0288%" y="101" width="0.1210%" height="15" fill="rgb(247,98,35)" fg:x="1196" fg:w="24"/><text x="6.2788%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (95 samples, 0.48%)</title><rect x="6.4019%" y="85" width="0.4789%" height="15" fill="rgb(247,138,52)" fg:x="1270" fg:w="95"/><text x="6.6519%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::analysis::estimates::stats (635 samples, 3.20%)</title><rect x="3.8814%" y="149" width="3.2009%" height="15" fill="rgb(213,79,30)" fg:x="770" fg:w="635"/><text x="4.1314%" y="159.50">sol..</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (297 samples, 1.50%)</title><rect x="5.5852%" y="133" width="1.4971%" height="15" fill="rgb(246,177,23)" fg:x="1108" fg:w="297"/><text x="5.8352%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (288 samples, 1.45%)</title><rect x="5.6306%" y="117" width="1.4518%" height="15" fill="rgb(230,62,27)" fg:x="1117" fg:w="288"/><text x="5.8806%" y="127.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (185 samples, 0.93%)</title><rect x="6.1498%" y="101" width="0.9326%" height="15" fill="rgb(216,154,8)" fg:x="1220" fg:w="185"/><text x="6.3998%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (40 samples, 0.20%)</title><rect x="6.8807%" y="85" width="0.2016%" height="15" fill="rgb(244,35,45)" fg:x="1365" fg:w="40"/><text x="7.1307%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::insertion_sort_shift_left (39 samples, 0.20%)</title><rect x="6.8858%" y="69" width="0.1966%" height="15" fill="rgb(251,115,12)" fg:x="1366" fg:w="39"/><text x="7.1358%" y="79.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (20 samples, 0.10%)</title><rect x="7.0824%" y="149" width="0.1008%" height="15" fill="rgb(240,54,50)" fg:x="1405" fg:w="20"/><text x="7.3324%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::analysis::estimates (744 samples, 3.75%)</title><rect x="3.7705%" y="181" width="3.7504%" height="15" fill="rgb(233,84,52)" fg:x="748" fg:w="744"/><text x="4.0205%" y="191.50">solu..</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::sample::Sample&lt;A&gt;::bootstrap (729 samples, 3.67%)</title><rect x="3.8462%" y="165" width="3.6748%" height="15" fill="rgb(207,117,47)" fg:x="763" fg:w="729"/><text x="4.0962%" y="175.50">solu..</text></g><g><title>solution-2a4fa3e3447dbfdf`oorandom::Rand64::rand_range (66 samples, 0.33%)</title><rect x="7.1882%" y="149" width="0.3327%" height="15" fill="rgb(249,43,39)" fg:x="1426" fg:w="66"/><text x="7.4382%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::Distribution&lt;A&gt;::confidence_interval (4 samples, 0.02%)</title><rect x="7.5209%" y="165" width="0.0202%" height="15" fill="rgb(209,38,44)" fg:x="1492" fg:w="4"/><text x="7.7709%" y="175.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (4 samples, 0.02%)</title><rect x="7.5209%" y="149" width="0.0202%" height="15" fill="rgb(236,212,23)" fg:x="1492" fg:w="4"/><text x="7.7709%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (4 samples, 0.02%)</title><rect x="7.5209%" y="133" width="0.0202%" height="15" fill="rgb(242,79,21)" fg:x="1492" fg:w="4"/><text x="7.7709%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (4 samples, 0.02%)</title><rect x="7.5209%" y="117" width="0.0202%" height="15" fill="rgb(211,96,35)" fg:x="1492" fg:w="4"/><text x="7.7709%" y="127.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (4 samples, 0.02%)</title><rect x="7.5209%" y="101" width="0.0202%" height="15" fill="rgb(253,215,40)" fg:x="1492" fg:w="4"/><text x="7.7709%" y="111.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (4 samples, 0.02%)</title><rect x="7.5209%" y="85" width="0.0202%" height="15" fill="rgb(211,81,21)" fg:x="1492" fg:w="4"/><text x="7.7709%" y="95.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (3 samples, 0.02%)</title><rect x="7.5260%" y="69" width="0.0151%" height="15" fill="rgb(208,190,38)" fg:x="1493" fg:w="3"/><text x="7.7760%" y="79.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`core::slice::sort::recurse (2 samples, 0.01%)</title><rect x="7.5310%" y="53" width="0.0101%" height="15" fill="rgb(235,213,38)" fg:x="1494" fg:w="2"/><text x="7.7810%" y="63.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (40 samples, 0.20%)</title><rect x="7.6268%" y="133" width="0.2016%" height="15" fill="rgb(237,122,38)" fg:x="1513" fg:w="40"/><text x="7.8768%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::analysis::regression (106 samples, 0.53%)</title><rect x="7.5209%" y="181" width="0.5343%" height="15" fill="rgb(244,218,35)" fg:x="1492" fg:w="106"/><text x="7.7709%" y="191.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::stats::bivariate::Data&lt;X,Y&gt;::bootstrap (102 samples, 0.51%)</title><rect x="7.5411%" y="165" width="0.5142%" height="15" fill="rgb(240,68,47)" fg:x="1496" fg:w="102"/><text x="7.7911%" y="175.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (102 samples, 0.51%)</title><rect x="7.5411%" y="149" width="0.5142%" height="15" fill="rgb(210,16,53)" fg:x="1496" fg:w="102"/><text x="7.7911%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`oorandom::Rand64::rand_range (45 samples, 0.23%)</title><rect x="7.8284%" y="133" width="0.2268%" height="15" fill="rgb(235,124,12)" fg:x="1553" fg:w="45"/><text x="8.0784%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::solve (17 samples, 0.09%)</title><rect x="8.0603%" y="133" width="0.0857%" height="15" fill="rgb(224,169,11)" fg:x="1599" fg:w="17"/><text x="8.3103%" y="143.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::find_first_digit_or_spelled (815 samples, 4.11%)</title><rect x="8.1813%" y="117" width="4.1083%" height="15" fill="rgb(250,166,2)" fg:x="1623" fg:w="815"/><text x="8.4313%" y="127.50">solu..</text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::check_spelled_digit (3,443 samples, 17.36%)</title><rect x="22.3813%" y="101" width="17.3556%" height="15" fill="rgb(242,216,29)" fg:x="4440" fg:w="3443"/><text x="22.6313%" y="111.50">solution-2a4fa3e3447dbfdf`a..</text></g><g><title>solution-2a4fa3e3447dbfdf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,024 samples, 50.53%)</title><rect x="8.0603%" y="165" width="50.5293%" height="15" fill="rgb(230,116,27)" fg:x="1599" fg:w="10024"/><text x="8.3103%" y="175.50">solution-2a4fa3e3447dbfdf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFr..</text></g><g><title>solution-2a4fa3e3447dbfdf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,024 samples, 50.53%)</title><rect x="8.0603%" y="149" width="50.5293%" height="15" fill="rgb(228,99,48)" fg:x="1599" fg:w="10024"/><text x="8.3103%" y="159.50">solution-2a4fa3e3447dbfdf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::trait..</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::bencher::Bencher&lt;M&gt;::iter (10,007 samples, 50.44%)</title><rect x="8.1460%" y="133" width="50.4436%" height="15" fill="rgb(253,11,6)" fg:x="1616" fg:w="10007"/><text x="8.3960%" y="143.50">solution-2a4fa3e3447dbfdf`criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::solve (9,185 samples, 46.30%)</title><rect x="12.2895%" y="117" width="46.3000%" height="15" fill="rgb(247,143,39)" fg:x="2438" fg:w="9185"/><text x="12.5395%" y="127.50">solution-2a4fa3e3447dbfdf`aoc_2023_01::solve</text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::find_first_digit_or_spelled (3,740 samples, 18.85%)</title><rect x="39.7369%" y="101" width="18.8527%" height="15" fill="rgb(236,97,10)" fg:x="7883" fg:w="3740"/><text x="39.9869%" y="111.50">solution-2a4fa3e3447dbfdf`aoc..</text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::solve (20 samples, 0.10%)</title><rect x="58.5896%" y="149" width="0.1008%" height="15" fill="rgb(233,208,19)" fg:x="11623" fg:w="20"/><text x="58.8396%" y="159.50"></text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::find_first_digit_or_spelled (705 samples, 3.55%)</title><rect x="58.7106%" y="133" width="3.5538%" height="15" fill="rgb(216,164,2)" fg:x="11647" fg:w="705"/><text x="58.9606%" y="143.50">solu..</text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::check_spelled_digit (2,771 samples, 13.97%)</title><rect x="70.5565%" y="117" width="13.9681%" height="15" fill="rgb(220,129,5)" fg:x="13997" fg:w="2771"/><text x="70.8065%" y="127.50">solution-2a4fa3e3447d..</text></g><g><title>all (19,838 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="19838"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (19,838 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="19838"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>solution-2a4fa3e3447dbfdf`main (19,838 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="19838"/><text x="0.2500%" y="303.50">solution-2a4fa3e3447dbfdf`main</text></g><g><title>solution-2a4fa3e3447dbfdf`std::rt::lang_start_internal (19,838 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="19838"/><text x="0.2500%" y="287.50">solution-2a4fa3e3447dbfdf`std::rt::lang_start_internal</text></g><g><title>solution-2a4fa3e3447dbfdf`std::rt::lang_start::_{{closure}} (19,838 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="19838"/><text x="0.2500%" y="271.50">solution-2a4fa3e3447dbfdf`std::rt::lang_start::_{{closure}}</text></g><g><title>solution-2a4fa3e3447dbfdf`std::sys_common::backtrace::__rust_begin_short_backtrace (19,838 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="19838"/><text x="0.2500%" y="255.50">solution-2a4fa3e3447dbfdf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>solution-2a4fa3e3447dbfdf`solution::main (19,838 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="19838"/><text x="0.2500%" y="239.50">solution-2a4fa3e3447dbfdf`solution::main</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (19,837 samples, 99.99%)</title><rect x="0.0050%" y="213" width="99.9950%" height="15" fill="rgb(226,81,46)" fg:x="1" fg:w="19837"/><text x="0.2550%" y="223.50">solution-2a4fa3e3447dbfdf`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::analysis::common (19,837 samples, 99.99%)</title><rect x="0.0050%" y="197" width="99.9950%" height="15" fill="rgb(247,70,30)" fg:x="1" fg:w="19837"/><text x="0.2550%" y="207.50">solution-2a4fa3e3447dbfdf`criterion::analysis::common</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::routine::Routine::sample (18,239 samples, 91.94%)</title><rect x="8.0603%" y="181" width="91.9397%" height="15" fill="rgb(212,68,19)" fg:x="1599" fg:w="18239"/><text x="8.3103%" y="191.50">solution-2a4fa3e3447dbfdf`criterion::routine::Routine::sample</text></g><g><title>solution-2a4fa3e3447dbfdf`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (8,215 samples, 41.41%)</title><rect x="58.5896%" y="165" width="41.4104%" height="15" fill="rgb(240,187,13)" fg:x="11623" fg:w="8215"/><text x="58.8396%" y="175.50">solution-2a4fa3e3447dbfdf`&lt;criterion::routine::Function&lt;M,F,T&gt; as cr..</text></g><g><title>solution-2a4fa3e3447dbfdf`criterion::bencher::Bencher&lt;M&gt;::iter (8,195 samples, 41.31%)</title><rect x="58.6904%" y="149" width="41.3096%" height="15" fill="rgb(223,113,26)" fg:x="11643" fg:w="8195"/><text x="58.9404%" y="159.50">solution-2a4fa3e3447dbfdf`criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::solve (7,486 samples, 37.74%)</title><rect x="62.2643%" y="133" width="37.7357%" height="15" fill="rgb(206,192,2)" fg:x="12352" fg:w="7486"/><text x="62.5143%" y="143.50">solution-2a4fa3e3447dbfdf`aoc_2023_01::solve</text></g><g><title>solution-2a4fa3e3447dbfdf`aoc_2023_01::find_first_digit_or_spelled (3,070 samples, 15.48%)</title><rect x="84.5246%" y="117" width="15.4754%" height="15" fill="rgb(241,108,4)" fg:x="16768" fg:w="3070"/><text x="84.7746%" y="127.50">solution-2a4fa3e3447dbfd..</text></g></svg></svg>